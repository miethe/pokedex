# pokedex_project/frontend/nginx.conf

# Basic Nginx configuration for serving frontend and proxying API

server {
    listen 80;
    # server_name localhost; # Optional: specify server name if needed

    # Define location of static frontend files
    root /usr/share/nginx/html;
    index index.html index.htm;

    # --- Custom Error Pages ---
    error_page 404 /404.html;
    location = /404.html {
        internal; # Prevents direct access to the error page file
        root /usr/share/nginx/html; # Ensure Nginx knows where to find it
    }

    error_page 500 502 503 504 /50x.html; # Catch common server errors
    location = /50x.html {
        internal;
        root /usr/share/nginx/html;
    }

    # Route for static assets (HTML, CSS, JS, etc.)
    location / {
        try_files $uri $uri/ /index.html; # Serve file if exists, directory if exists, fallback to index.html
        # Add caching headers for static assets (optional but good practice)
        location ~* \.(?:css|js|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1d;
            add_header Cache-Control "public";
            access_log off; # Don't log access for static files
        }
    }

    # --- Location block for locally served sprites ---
    location /assets/ {
        # Sets cache control headers for sprites
        expires 1y; # Cache sprites for a long time
        add_header Cache-Control "public";
        access_log off; # Don't log access for sprites
        try_files $uri =404; # Serve the file if it exists, otherwise 404
    }

    # Route for API requests - Proxy to the backend service
    location /api/ {
        # The backend service is named 'backend' in docker-compose.yml
        # and runs on port 8000
        proxy_pass http://backend:8000;

        # Set headers to pass information to the backend application
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # --- Intercept Backend Errors ---
        proxy_intercept_errors on; # Tell Nginx to handle backend errors specified in error_page
        
        # WebSocket support (optional, if needed in the future)
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection "upgrade";

        # Adjust proxy timeouts if needed
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;
    }

    # Optional: Add error pages
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    # }
}